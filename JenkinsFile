pipeline {
    agent any

    stages {
        stage('Build Docker Image') {
            steps {
                // This stage builds a Docker image from the Dockerfile in your GitHub repository
                script {
                    // Build the Docker image with a specified name and tag
                    docker.build("my-image:latest")
                }
            }
        }
        
        stage('Push to ECR') {
            steps {
                // This stage pushes the built Docker image to AWS ECR
                script {
                    // Use Jenkins credentials to authenticate with AWS ECR
                    withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', 
                                      accessKeyVariable: 'AWS_ACCESS_KEY_ID', 
                                      credentialsId: 'aws-cred', 
                                      secretKeyVariable: 'AWS_SECRET_ACCESS_KEY']]) {
                        // Define the AWS ECR repository URL
                        def ecrUrl = 'https://891377099888.dkr.ecr.us-east-1.amazonaws.com'
                        
                        // Push the Docker image to AWS ECR
                        docker.withRegistry(ecrUrl, 'ecr:us-east-1') {
                            docker.image("my-image:latest").push('latest')
                        }
                    }
                }
            }
        }
        
        stage('Deploy to ECS') {
            steps {
                // This stage deploys the Docker image to ECS Fargate
                script {
                    // Define the ECS task definition and service name
                    def ecsTaskDefinition = 'my-task'
                    def ecsServiceName = 'my-service'

                    // Specify ECS parameters for service update
                    def ecsParams = [
                        cluster: 'my-cluster',                 // ECS cluster name
                        serviceName: ecsServiceName,          // ECS service name
                        taskDefinition: ecsTaskDefinition,    // ECS task definition name
                        waitForCompletion: true                // Wait for the service update to complete
                    ]

                    // Update the ECS service with the new task definition
                    ecsUpdateService(ecsParams)
                }
            }
        }
    }
}
